@using LoLTournament.Models
@model LoLTournament.Models.ScheduleViewModel

<div class="schedule-header">
    <div class="container">
        <div class="row">
            <div class="col-lg-12">
                <div class="intro-message-small">
                    <br/>
                    <h1>Match schedule</h1>
                    <hr class="intro-divider">
                </div>
            </div>
        </div>
    </div>
</div>

<div class="content-section-b">
    <div class="container">
        <div class="row">
            <div class="col-lg-12 col-lg-12">
                <div class="clearfix"></div>

                <table width="100%">
                    <tbody>
                    @{
                        for (int i = 0; i < 2; i++)
                        {
                            <tr>
                                @for (int j = 0; j < 4; j++)
                                {
                                    if (i*16 + 4*j < Model.Teams.Count)
                                    {
                                        <td style="padding-left: 10px; width: 25%; font-size: 75%">
                                            <ul class="list-group">
                                                <li class="list-group-item list-group-item-info">
                                                    <b>Pool @(Model.Teams[i*16 + 4*j].Pool + 1)</b>
                                                </li>
                                                @for (int k = 0; k < 4; k++)
                                                {
                                                    <li class="list-group-item">
                                                        <a href="@Url.Action("Team", "Schedule", new RouteValueDictionary {{"teamId", @Model.Teams[i*16 + 4*j + k].Id}})">@Model.Teams[i*16 + 4*j + k].Name</a>
                                                    </li>
                                                }
                                            </ul>
                                        </td>
                                    }
                                }
                            </tr>
                        }
                    }
                    </tbody>
                </table>

                @if (Model.Teams.Count == 32)
                {
                    <h2>Knock-out phase</h2>
                    <div id="bracket"></div>
                }

                <h2>Schedule</h2>

                <ul>
                    <li>
                        <b>Pool phase:</b> each team plays three matches, one versus each opponent in their pool.
                    </li>
                    <li>
                        <b>Elimination phase:</b> the two best teams of each pool enter the elimination phase, where they will compete against winners of other pools. 'Best' is defined as winning the most matches. If there is a tie, the team with the shortest total won-match play time is placed higher. Contrary to last year, there will be no losers' bracket. Instead, we organize separate mini-tournaments (e.g. ARAM) for teams that have been eliminated from the tournament.<br/>
                    </li>
                    <li>
                        <b>Bronze finale:</b> the two teams that lost their semi-finals will play in the Bronze Finale, determining who gets the third and fourth place.
                    </li>
                    <li>
                        <b>Finale (best out of three if time allows, otherwise single match):</b> the two teams that won their semi-finals will compete in a series of matches.
                    </li>
                </ul>
            </div>
        </div>
    </div>
</div>

@Scripts.Render("~/bundles/brackets")

<script>
    var bracketData = {
        "teams": @Html.Raw(Json.Encode(Model.KnockOutTeams)),
        "results": @Html.Raw(Json.Encode(Model.KnockOutResults)),
    };


    $("#bracket").bracket({
        init: bracketData,
        teamWidth: 150
    });
</script>
<style>
    .label {
        color: #000;
    }
</style>